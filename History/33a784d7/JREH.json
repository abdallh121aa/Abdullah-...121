{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "${file}",
            "console": "integratedTerminal",
            "justMyCode":  f(fe_nobigramfe_nonefe_nobigram_nostemfe_nostemfe&
            Pylance
            
            Fast, feature-rich language support for Python
            
            This repository is for providing feedback and documentation on the Pylance language server extension in Visual Studio Code. You can use the repository to report issues or submit feature requests. The Pylance codebase is not open-source but you can contribute to Pyright to make improvements to the core typing engine that powers the Pylance experience.
            
            Pylance is the default language support for Python in Visual Studio Code and is shipped as part of that extension as an optional dependency.
            
            Quick Start
            
            Install the Python extension from the marketplace. Pylance will be installed as an optional extension.
            Open a Python (.py) file and the Pylance extension will activate.
            Note: If you've previously set a language server and want to try Pylance, make sure you've set "python.languageServer": "Default" or "Pylance" in your settings.json file using the text editor, or using the Settings Editor UI.
            
            Features
            
            
            
            Pylance provides some awesome features for Python 3, including:
            
            Docstrings
            Signature help, with type information
            Parameter suggestions
            Code completion
            Auto-imports (as well as add and remove import code actions)
            As-you-type reporting of code errors and warnings (diagnostics)
            Code outline
            Code navigation
            Type checking mode
            Native multi-root workspace support
            IntelliCode compatibility
            Jupyter Notebooks compatibility
            Semantic highlighting
            See the changelog for the latest release.
            
            Settings and Customization
            
            Pylance provides users with the ability to customize their Python language support via a host of settings which can either be placed in the settings.json file in your workspace, or edited through the Settings Editor UI.
            
            pylance.insidersChannel
            
            Used to control the insiders download channel.
            Available values:
            off (default)
            daily
            python.analysis.typeCheckingMode
            
            Used to specify the level of type checking analysis performed.
            Default: off
            Available values:
            off: No type checking analysis is conducted; unresolved imports/variables diagnostics are produced
            basic: Non-type checking-related rules (all rules in off) + basic type checking rules
            strict: All type checking rules at the highest severity of error (includes all rules in off and basic categories)
            python.analysis.diagnosticMode
            
            Used to allow a user to specify what files they want the language server to analyze to get problems flagged in their code.
            Available values:
            workspace
            openFilesOnly (default)
            python.analysis.stubPath
            
            Used to allow a user to specify a path to a directory that contains custom type stubs. Each package's type stub file(s) are expected to be in its own subdirectory.
            Default value: ./typings
            python.analysis.autoSearchPaths
            
            Used to automatically add search paths based on some predefined names (like src).
            Available values:
            true (default)
            false
            python.analysis.extraPaths
            
            Used to specify extra search paths for import resolution. This replaces the old python.autoComplete.extraPaths setting.
            Default value: empty array
            python.analysis.diagnosticSeverityOverrides
            
            Used to allow a user to override the severity levels for individual diagnostics should they desire.
            
            Accepted severity values:
            
            error (red squiggle)
            warning (yellow squiggle)
            information (blue squiggle)
            none (disables the rule)
            Available rule to use as keys can be found here
            
            Example:
            
            {
                "python.analysis.diagnosticSeverityOverrides": {
                    "reportUnboundVariable": "information",
                    "reportImplicitStringConcatenation": "warning"
                }
            }
            python.analysis.useLibraryCodeForTypes
            
            Used to parse the source code for a package when a typestub is not found.
            Accepted values:
            true (default)
            false
            python.analysis.autoImportCompletions
            
            Used to control the offering of auto-imports in completions.
            Accepted values:
            true (default)
            false
            python.analysis.completeFunctionParens
            
            Add parentheses to function completions.
            Accepted values:
            true
            false (default)
            Semantic highlighting
            
            Visual Studio Code uses TextMate grammars as the main tokenization engine. TextMate grammars work on a single file as input and break it up based on lexical rules expressed in regular expressions.
            
            Semantic tokenization allows language servers to provide additional token information based on the language server's knowledge on how to resolve symbols in the context of a project. Themes can opt-in to use semantic tokens to improve and refine the syntax highlighting from grammars. The editor applies the highlighting from semantic tokens on top of the highlighting from grammars.
            
            Here's an example of what semantic highlighting can add:
            
            Without semantic highlighting:
            
            
            
            With semantic highlighting:
            
            
            
            Semantic colors can be customized in settings.json by associating the Pylance semantic token types and modifiers with the desired colors.
            
            Semantic token types
            
            class, enum
            parameter, variable, property, enumMember
            function, member
            module
            intrinsic
            magicFunction (dunder methods)
            selfParameter, clsParameter
            Semantic token modifiers
            
            declaration
            readonly, static, abstract
            async
            typeHint, typeHintComment
            decorator
            builtin
            The scope inspector tool allows you to explore what semantic tokens are present in a source file and what theme rules they match to.
            
            Example of customizing semantic colors in settings.json:
            
            {
                "editor.semanticTokenColorCustomizations": {
                    "[One Dark Pro]": {
                        // Apply to this theme only
                        "enabled": true,
                        "rules": {
                            "magicFunction:python": "#ee0000",
                            "function.declaration:python": "#990000",
                            "*.decorator:python": "#0000dd",
                            "*.typeHint:python": "#5500aa",
                            "*.typeHintComment:python": "#aaaaaa"
                        }
                    }
                }
            }
            Troubleshooting
            
            Known issues are documented in TROUBLESHOOTING.
            
            Contributing
            
            Pylance leverages Microsoft's open-source static type checking tool, Pyright, to provide performant language support for Python.
            
            Code contributions are welcomed via the Pyright repo.
            
            Pylance ships with a collection of type stubs for popular modules to provide fast and accurate auto-completions and type checking. Our type stubs are sourced from typeshed and our work-in-progress stub repository, microsoft/python-type-stubs. Type stubs in microsoft/python-type-stubs will be contributed back to typeshed or added inline to source packages once they are of high enough quality.
            
            For information on getting started, refer to the CONTRIBUTING instructions.
            
            Feedback
            
            File a bug in GitHub Issues
            Tweet us with other feedback
            License
            
            See LICENSE for more information.
            Diagnostic Severity Rules
            
            This doc details all available rules that can be customized using the python.analysis.diagnosticSeverityOverrides setting. If you are looking for details on other available settings, please refer back to the main README.
            
            Value	Description
            reportGeneralTypeIssues	Diagnostics for general type inconsistencies, unsupported operations, argument/parameter mismatches, etc. This covers all of the basic type-checking rules not covered by other rules. It does not include syntax errors.
            reportPropertyTypeMismatch	Diagnostics for properties where the type of the value passed to the setter is not assignable to the value returned by the getter. Such mismatches violate the intended use of properties, which are meant to act like variables.
            reportFunctionMemberAccess	Diagnostics for member accesses on functions.
            reportMissingImports	Diagnostics for imports that have no corresponding imported python file or type stub file.
            reportMissingModuleSource	Diagnostics for imports that have no corresponding source file. This happens when a type stub is found, but the module source file was not found, indicating that the code may fail at runtime when using this execution environment. Type checking will be done using the type stub.
            reportMissingTypeStubs	Diagnostics for imports that have no corresponding type stub file (either a typeshed file or a custom type stub). The type checker requires type stubs to do its best job at analysis.
            reportImportCycles	Diagnostics for cyclical import chains. These are not errors in Python, but they do slow down type analysis and often hint at architectural layering issues. Generally, they should be avoided.
            reportUnusedImport	Diagnostics for an imported symbol that is not referenced within that file.
            reportUnusedClass	Diagnostics for a class with a private name (starting with an underscore) that is not accessed.
            reportUnusedFunction	Diagnostics for a function or method with a private name (starting with an underscore) that is not accessed.
            reportUnusedVariable	Diagnostics for a variable that is not accessed.
            reportDuplicateImport	Diagnostics for an imported symbol or module that is imported more than once.
            reportWildcardImportFromLibrary	Diagnostics for an wildcard import from an external library.
            reportOptionalSubscript	Diagnostics for an attempt to subscript (index) a variable with an Optional type.
            reportOptionalMemberAccess	Diagnostics for an attempt to access a member of a variable with an Optional type.
            reportOptionalCall	Diagnostics for an attempt to call a variable with an Optional type.
            reportOptionalIterable	Diagnostics for an attempt to use an Optional type as an iterable value (e.g. within a for statement).
            reportOptionalContextManager	Diagnostics for an attempt to use an Optional type as a context manager (as a parameter to a with statement).
            reportOptionalOperand	Diagnostics for an attempt to use an Optional type as an operand to a binary or unary operator (like '+', '==', 'or', 'not').
            reportTypedDictNotRequiredAccess	Diagnostics for an attempt to access a non-required key within a TypedDict without a check for its presence.
            reportUntypedFunctionDecorator	Diagnostics for function decorators that have no type annotations. These obscure the function type, defeating many type analysis features.
            reportUntypedClassDecorator	Diagnostics for class decorators that have no type annotations. These obscure the class type, defeating many type analysis features.
            reportUntypedBaseClass	Diagnostics for base classes whose type cannot be determined statically. These obscure the class type, defeating many type analysis features.
            reportUntypedNamedTuple	Diagnostics when “namedtuple” is used rather than “NamedTuple”. The former contains no type information, whereas the latter does.
            reportPrivateUsage	Diagnostics for incorrect usage of private or protected variables or functions. Protected class members begin with a single underscore _ and can be accessed only by subclasses. Private class members begin with a double underscore but do not end in a double underscore and can be accessed only within the declaring class. Variables and functions declared outside of a class are considered private if their names start with either a single or double underscore, and they cannot be accessed outside of the declaring module.
            reportPrivateImportUsage	Diagnostics for incorrect usage of symbol imported from a "py.typed" module that is not re-exported from that module.
            reportConstantRedefinition	Diagnostics for attempts to redefine variables whose names are all-caps with underscores and numerals.
            reportIncompatibleMethodOverride	Diagnostics for methods that override a method of the same name in a base class in an incompatible manner (wrong number of parameters, incompatible parameter types, or incompatible return type).
            reportIncompatibleVariableOverride	Diagnostics for class variable declarations that override a symbol of the same name in a base class with a type that is incompatible with the base class symbol type.
            reportInconsistentConstructor	Diagnostics when an __init__method signature is inconsistent with a __new__ signature.
            reportOverlappingOverload	Diagnostics for function overloads that overlap in signature and obscure each other or have incompatible return types.
            reportMissingSuperCall	Diagnostics for __init__, __init_subclass__, __enter__ and __exit__ methods in a subclass that fail to call through to the same-named method on a base class.
            reportInvalidStringEscapeSequence	Diagnostics for invalid escape sequences used within string literals. The Python specification indicates that such sequences will generate a syntax error in future versions.
            reportUnknownParameterType	Diagnostics for input or return parameters for functions or methods that have an unknown type.
            reportUnknownArgumentType	Diagnostics for call arguments for functions or methods that have an unknown type.
            reportUnknownLambdaType	Diagnostics for input or return parameters for lambdas that have an unknown type.
            reportUnknownVariableType	Diagnostics for variables that have an unknown type.
            reportUnknownMemberType	Diagnostics for class or instance variables that have an unknown type.
            reportMissingParameterType	Diagnostics for parameters that are missing a type annotation.
            reportMissingTypeArgument	Diagnostics for when a generic class is used without providing explicit or implicit type arguments.
            reportInvalidTypeVarUse	Diagnostics for improper use of type variables in a function signature.
            reportCallInDefaultInitializer	Diagnostics for function calls within a default value initialization expression. Such calls can mask expensive operations that are performed at module initialization time.
            reportUnnecessaryIsInstance	Diagnostics for 'isinstance' or 'issubclass' calls where the result is statically determined to be always true or always false. Such calls are often indicative of a programming error.
            reportUnnecessaryCast	Diagnostics for 'cast' calls that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.
            reportUnnecessaryComparison	Diagnostics for '==' and '!=' comparisons that are statically determined to be unnecessary. Such calls are sometimes indicative of a programming error.
            reportAssertAlwaysTrue	Diagnostics for 'assert' statement that will provably always assert. This can be indicative of a programming error.
            reportSelfClsParameterName	Diagnostics for a missing or misnamed “self” parameter in instance methods and “cls” parameter in class methods. Instance methods in metaclasses (classes that derive from “type”) are allowed to use “cls” for instance methods.
            reportImplicitStringConcatenation	Diagnostics for two or more string literals that follow each other, indicating an implicit concatenation. This is considered a bad practice and often masks bugs such as missing commas.
            reportUndefinedVariable	Diagnostics for undefined variables.
            reportUnboundVariable	Diagnostics for unbound and possibly unbound variables.
            reportInvalidStubStatement	Diagnostics for statements that should not appear within a stub file.
            reportIncompleteStub	Diagnostics for the use of a module-level __getattr__ function, indicating that the stub is incomplete.
            reportUnusedCallResult	Diagnostics for call expressions whose results are not consumed and are not None.
            reportUnsupportedDunderAll	Diagnostics for unsupported operations performed on __all__.
            reportUnusedCoroutine	Diagnostics for call expressions that return a Coroutine and whose results are not consumed.
            reportUnusedExpression	Diagnostics for simple expressions whose results are not used in any way. The default value for this setting is 'none'.
            reportUnnecessaryTypeIgnoreComment	Diagnostics for a '# type: ignore' comment that would have no effect if removed.
            reportMatchNotExhaustive	Diagnostics for a 'match' statement that does not provide cases that exhaustively match against all potential types of the target expression.
            &
            import numpy as np
            current_date = "2022-01-25 17:21:22"
            cdate = datetime.strptime(current_date, '%Y-%m-%d %H:%M:%S')
            day_sin = np.sin(2 * np.pi * cdate.timetuple().tm_yday/365.0)
            day_cos = np.cos(2 * np.pi * cdate.timetuple().tm_yday/365.0)
            &df['month_sin'] = np.sin(2 * np.pi * df['date_time'].dt.month/12.0)
            df['month_cos'] = np.cos(2 * np.pi * df['date_time'].dt.month/12.0)&df['year'] = df['date_time'].dt.year&import numpy as np&import pandas as pd
            df = pd.read_csv('.https://towardsdatascience.com/make-your-machine-learning-model-work-better-with-datetime-features-eb21de397fe8./input/weather-dataset/weatherHistory.csv')
            
            hour_sin = np.sin(2 * np.pi * cdate.hour/24.0)
            hour_cos = np.cos(2 * np.pi * cdate.hour/24.0)&&df['Loud Cover'].value_counts()&0.0    96453
            Name: Loud Cover, dtype: int64&df.drop(['Daily Summary','Loud Cover'],axis=1,inplace=True)&df.isnull().sum()&Formatted Date                0
            Summary                       0
            Precip Type                 517
            Temperature (C)               0
            Apparent Temperature (C)      0
            Humidity                      0
            Wind Speed (km/h)             0
            Wind Bearing (degrees)        0
            Visibility (km)               0
            Pressure (millibars)          0&df.dropna(inplace=True)&from sklearn.preprocessing import LabelEncoder
            le = LabelEncoder()
            df['Precip Type']=le.fit_transform(df['Precip Type'])
            df['Summary']=le.fit_transform(df['Summary'])
            &from sklearn.preprocessing import StandardScaler
            scaler = StandardScaler()
            df[df.columns[2:]] = scaler.fit_transform(df[df.columns[2:]])
            &import numpy as np
            from datetime import datetime
            def discretize_date(current_date, t):
                current_date = current_date[:-10]
                cdate = datetime.strptime(current_date, '%Y-%m-%d %H:%M:%S')
            if t == 'hour_sin':
                    return np.sin(2 * np.pi * cdate.hour/24.0)
                if t == 'hour_cos':
                    return np.cos(2 * np.pi * cdate.hour/24.0)
                if t == 'day_sin':
                    return np.sin(2 * np.pi * cdate.timetuple().tm_yday/365.0)
                if t == 'day_cos':
                    return np.cos(2 * np.pi * cdate.timetuple().tm_yday/365.0)
            &date_types = ['hour_sin', 'hour_cos', 'day_sin', 'day_cos']
            for dt in date_types:
                df[dt] = df['Formatted Date'].apply(lambda x : discretize_date(x, dt))
            df.drop(['Formatted Date'],axis=1,inplace=True)
            &df.corr()&
            
            &df.drop(['Apparent Temperature (C)'],axis=1,inplace=True)&from sklearn.model_selection import train_test_split
            X = df.iloc[:,1:]
            y=df.iloc[:,0] 
            
            X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=1)
            &from sklearn.ensemble import RandomForestClassifier
            model = RandomForestClassifier(max_depth=32,n_estimators=120,random_state=1)
            model.fit(X_train,y_train)
            y_pred = model.predict(X_test)
            &from sklearn.metrics import accuracy_score
            accuracy_score(y_test, y_pred)
            &0.6695389319342622&
            
            &
            
            Apple Watch
            &
            &
            &
            )=∑∞n=0Ansin(nx)+Bncos(nx) 
        }
    ]
}